Index: src/main/resources/static/single-practice.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"zh-CN\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>战弈象棋 - 单人摆谱</title>\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\r\n    <style>\r\n        /* 基础重置 */\r\n        * {\r\n            margin: 0;\r\n            padding: 0;\r\n            box-sizing: border-box;\r\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n        }\r\n\r\n        body {\r\n            background: linear-gradient(135deg, #6e8efb, #a777e3);\r\n            color: #333;\r\n            min-height: 100vh;\r\n            display: flex;\r\n            flex-direction: column;\r\n        }\r\n\r\n        /* 顶部导航栏 */\r\n        .top-nav {\r\n            background: rgba(255, 255, 255, 0.95);\r\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n            padding: 15px 30px;\r\n            display: flex;\r\n            justify-content: space-between;\r\n            align-items: center;\r\n        }\r\n\r\n        .logo {\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 15px;\r\n        }\r\n\r\n        .logo-icon {\r\n            width: 45px;\r\n            height: 45px;\r\n            background: linear-gradient(135deg, #6e8efb, #a777e3);\r\n            border-radius: 50%;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n        }\r\n\r\n        .logo-icon i {\r\n            font-size: 24px;\r\n            color: white;\r\n        }\r\n\r\n        .logo-text {\r\n            font-size: 24px;\r\n            font-weight: 700;\r\n            background: linear-gradient(135deg, #6e8efb, #a777e3);\r\n            -webkit-background-clip: text;\r\n            -webkit-text-fill-color: transparent;\r\n        }\r\n\r\n        .user-info {\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 15px;\r\n        }\r\n\r\n        .user-avatar {\r\n            width: 40px;\r\n            height: 40px;\r\n            border-radius: 50%;\r\n            background: linear-gradient(135deg, #6e8efb, #a777e3);\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            color: white;\r\n            font-weight: bold;\r\n            font-size: 18px;\r\n        }\r\n\r\n        .user-name {\r\n            font-weight: 600;\r\n        }\r\n\r\n        .nav-controls {\r\n            display: flex;\r\n            gap: 15px;\r\n        }\r\n\r\n        .nav-btn {\r\n            width: 40px;\r\n            height: 40px;\r\n            border-radius: 50%;\r\n            background: #f5f7ff;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            cursor: pointer;\r\n            transition: all 0.3s;\r\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n        }\r\n\r\n        .nav-btn:hover {\r\n            background: #eef0ff;\r\n            transform: translateY(-2px);\r\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);\r\n        }\r\n\r\n        /* 主内容区 */\r\n        .main-container {\r\n            display: flex;\r\n            flex: 1;\r\n            padding: 20px;\r\n            gap: 20px;\r\n        }\r\n\r\n        /* 左侧导航栏 */\r\n        .sidebar {\r\n            width: 260px;\r\n            background: rgba(255, 255, 255, 0.95);\r\n            border-radius: 16px;\r\n            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\r\n            padding: 20px;\r\n            height: fit-content;\r\n        }\r\n\r\n        .nav-title {\r\n            font-size: 18px;\r\n            font-weight: 600;\r\n            margin-bottom: 20px;\r\n            padding-bottom: 10px;\r\n            border-bottom: 1px solid #eee;\r\n            color: #555;\r\n        }\r\n\r\n        .nav-item {\r\n            padding: 12px 15px;\r\n            border-radius: 10px;\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 12px;\r\n            margin-bottom: 8px;\r\n            cursor: pointer;\r\n            transition: all 0.3s;\r\n        }\r\n\r\n        .nav-item i {\r\n            width: 24px;\r\n            text-align: center;\r\n            color: #6e8efb;\r\n        }\r\n\r\n        .nav-item:hover {\r\n            background: #f5f7ff;\r\n        }\r\n\r\n        /* 右侧内容区 */\r\n        .content {\r\n            flex: 1;\r\n            background: rgba(255, 255, 255, 0.95);\r\n            border-radius: 16px;\r\n            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\r\n            padding: 30px;\r\n            display: flex;\r\n            flex-direction: column;\r\n        }\r\n\r\n        .content-header {\r\n            margin-bottom: 30px;\r\n            text-align: center;\r\n        }\r\n\r\n        .content-title {\r\n            font-size: 28px;\r\n            font-weight: 700;\r\n            margin-bottom: 10px;\r\n            background: linear-gradient(135deg, #6e8efb, #a777e3);\r\n            -webkit-background-clip: text;\r\n            -webkit-text-fill-color: transparent;\r\n        }\r\n\r\n        .content-subtitle {\r\n            color: #777;\r\n            font-size: 16px;\r\n            margin-bottom: 25px;\r\n        }\r\n\r\n        /* 棋盘容器 */\r\n        .chess-container {\r\n            flex: 1;\r\n            display: flex;\r\n            flex-direction: column;\r\n            align-items: center;\r\n            justify-content: center;\r\n            position: relative;\r\n        }\r\n\r\n        /* 核心：棋盘样式 */\r\n        .chessboard {\r\n            width: 600px; /* 外框宽度：左右各30像素边距 + 9列×60 */\r\n            height: 660px; /* 外框高度：上下各30像素边距 + 10行×60 */\r\n            background-image: url('ChessPic/qipan.jpg'); /* 使用棋盘图片 */\r\n            background-size: cover;\r\n            background-position: center;\r\n            border: 3px solid #8B4513; /* 深棕色边框 */\r\n            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\r\n            position: relative;\r\n            margin: 0 auto;\r\n        }\r\n\r\n        /* 棋盘左侧阵营提示 */\r\n        .side-indicator {\r\n            position: absolute;\r\n            left: calc(50% - 600px/2 - 140px); /* 棋盘左侧再向左偏移一定距离 */\r\n            top: 50%;\r\n            transform: translateY(-50%);\r\n            width: 120px;\r\n            padding: 10px 12px;\r\n            border-radius: 10px;\r\n            background: rgba(255,255,255,0.9);\r\n            box-shadow: 0 4px 12px rgba(0,0,0,0.15);\r\n            color: #333;\r\n            text-align: center;\r\n            font-weight: 600;\r\n            line-height: 1.4;\r\n        }\r\n\r\n        /* 棋盘网格配置 */\r\n        :root {\r\n            --grid-size: 66px; /* 每个格子的大小（从65px增加到65.5px） */\r\n            --board-padding: 30px; /* 棋盘内边距 */\r\n            --piece-size: 50px; /* 棋子大小 */\r\n        }\r\n\r\n        /* 格线 - 隐藏CSS格线，使用图片中的格线 */\r\n        .chessboard::before {\r\n            display: none; /* 隐藏CSS格线，使用图片中的格线 */\r\n        }\r\n\r\n        /* 九宫格斜线 - 隐藏，使用图片中的斜线 */\r\n        .palace-lines {\r\n            display: none; /* 隐藏九宫斜线，使用图片中的斜线 */\r\n        }\r\n\r\n        /* 九宫九点 - 隐藏，使用图片中的点位 */\r\n        .palace-dots {\r\n            display: none; /* 隐藏九宫点位，使用图片中的点位 */\r\n        }\r\n\r\n        /* 楚河汉界 - 隐藏，使用图片中的文字 */\r\n        .river {\r\n            display: none; /* 隐藏楚河汉界，使用图片中的文字 */\r\n        }\r\n\r\n        /* 坐标数字 - 隐藏，使用图片中的坐标 */\r\n        .coordinates {\r\n            display: none; /* 隐藏坐标数字，使用图片中的坐标 */\r\n        }\r\n\r\n        /* 棋子样式 */\r\n        .piece {\r\n            width: 50px; /* 调整棋子大小，确保与棋盘格子匹配 */\r\n            height: 50px;\r\n            border-radius: 50%;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            font-size: 22px;\r\n            font-weight: bold;\r\n            cursor: pointer;\r\n            transition: transform 0.2s ease, box-shadow 0.2s ease;\r\n            position: absolute;\r\n            z-index: 10;\r\n            user-select: none;\r\n            background-size: cover;\r\n            background-position: center;\r\n            background-repeat: no-repeat;\r\n        }\r\n\r\n        /* 选中状态 */\r\n        .piece.selected {\r\n            box-shadow: 0 0 0 3px #ffcc00;\r\n            transform: scale(1.1);\r\n            z-index: 20;\r\n        }\r\n\r\n        /* 红方棋子 */\r\n        .piece.red {\r\n            background-color: #ffdddd;\r\n            color: #b30000;\r\n            border: 2px solid #b30000;\r\n            box-shadow: 0 3px 6px rgba(179, 0, 0, 0.2);\r\n        }\r\n\r\n        /* 黑方棋子 */\r\n        .piece.black {\r\n            background-color: #fff;\r\n            color: #000;\r\n            border: 2px solid #000;\r\n            box-shadow: 0 3px 6px rgba(0, 0, 0, 0.2);\r\n        }\r\n\r\n        .piece:hover:not(.selected) {\r\n            transform: scale(1.1);\r\n            box-shadow: 0 5px 10px rgba(0, 0, 0, 0.3);\r\n            z-index: 15;\r\n        }\r\n\r\n        /* 合法移动提示 */\r\n        .valid-move {\r\n            position: absolute;\r\n            width: 16px;\r\n            height: 16px;\r\n            border-radius: 50%;\r\n            background-color: rgba(0, 200, 0, 0.3);\r\n            z-index: 15;\r\n            pointer-events: auto;\r\n            cursor: pointer;\r\n        }\r\n\r\n        /* 操作按钮 */\r\n        .controls {\r\n            margin-top: 30px;\r\n            display: flex;\r\n            justify-content: center;\r\n            gap: 20px;\r\n        }\r\n\r\n        .control-btn {\r\n            padding: 12px 30px;\r\n            border: none;\r\n            border-radius: 50px;\r\n            font-size: 16px;\r\n            font-weight: 600;\r\n            cursor: pointer;\r\n            transition: all 0.3s;\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 8px;\r\n        }\r\n\r\n        .undo-btn {\r\n            background: linear-gradient(135deg, #6e8efb, #a777e3);\r\n            color: white;\r\n            box-shadow: 0 4px 10px rgba(110, 142, 251, 0.4);\r\n        }\r\n\r\n        .undo-btn:hover {\r\n            transform: translateY(-2px);\r\n            box-shadow: 0 6px 15px rgba(110, 142, 251, 0.6);\r\n        }\r\n\r\n        .restart-btn {\r\n            background: linear-gradient(135deg, #4CAF50, #2E7D32);\r\n            color: white;\r\n            box-shadow: 0 4px 10px rgba(76, 175, 80, 0.4);\r\n        }\r\n\r\n        .restart-btn:hover {\r\n            transform: translateY(-2px);\r\n            box-shadow: 0 6px 15px rgba(76, 175, 80, 0.6);\r\n        }\r\n\r\n        .hint-btn {\r\n            background: linear-gradient(135deg, #FFC107, #FF9800);\r\n            color: white;\r\n            box-shadow: 0 4px 10px rgba(255, 193, 7, 0.4);\r\n        }\r\n\r\n        .hint-btn:hover {\r\n            transform: translateY(-2px);\r\n            box-shadow: 0 6px 15px rgba(255, 193, 7, 0.6);\r\n        }\r\n\r\n        /* 状态提示 */\r\n        .status-info {\r\n            margin-top: 15px;\r\n            text-align: center;\r\n            font-weight: 500;\r\n            color: #444;\r\n            height: 24px;\r\n        }\r\n\r\n        /* 底部信息 */\r\n        .footer {\r\n            text-align: center;\r\n            padding: 20px;\r\n            color: rgba(255, 255, 255, 0.8);\r\n            font-size: 14px;\r\n            margin-top: auto;\r\n        }\r\n\r\n        /* 加载指示器 */\r\n        .loading {\r\n            position: absolute;\r\n            top: 50%;\r\n            left: 50%;\r\n            transform: translate(-50%, -50%);\r\n            font-size: 24px;\r\n            color: #8B4513;\r\n            z-index: 100;\r\n        }\r\n\r\n        /* 响应式调整 */\r\n        @media (max-width: 900px) {\r\n            .main-container {\r\n                flex-direction: column;\r\n            }\r\n\r\n            .sidebar {\r\n                width: 100%;\r\n            }\r\n        }\r\n\r\n        @media (max-width: 600px) {\r\n            .chessboard {\r\n                width: 450px;\r\n                height: 500px;\r\n                grid-template-columns: repeat(9, 50px);\r\n                grid-template-rows: repeat(10, 50px);\r\n            }\r\n\r\n            .piece {\r\n                width: 40px;\r\n                height: 40px;\r\n                font-size: 20px;\r\n            }\r\n\r\n            .controls {\r\n                flex-wrap: wrap;\r\n            }\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n<!-- 顶部导航栏 -->\r\n<nav class=\"top-nav\">\r\n    <div class=\"logo\">\r\n        <div class=\"logo-icon\">\r\n            <i class=\"fas fa-chess-rook\"></i>\r\n        </div>\r\n        <div class=\"logo-text\">战弈象棋</div>\r\n    </div>\r\n    <div class=\"user-info\">\r\n        <div class=\"user-avatar\">张</div>\r\n        <div class=\"user-name\">张棋手</div>\r\n    </div>\r\n    <div class=\"nav-controls\">\r\n        <div class=\"nav-btn\">\r\n            <i class=\"fas fa-bell\"></i>\r\n        </div>\r\n        <div class=\"nav-btn\">\r\n            <i class=\"fas fa-cog\"></i>\r\n        </div>\r\n        <div class=\"nav-btn\">\r\n            <i class=\"fas fa-sign-out-alt\"></i>\r\n        </div>\r\n    </div>\r\n</nav>\r\n\r\n<!-- 主内容区 -->\r\n<div class=\"main-container\">\r\n    <!-- 左侧返回栏 -->\r\n    <div class=\"sidebar\">\r\n        <div class=\"nav-title\">游戏功能</div>\r\n        <div class=\"nav-item\" id=\"returnBtn\">\r\n            <i class=\"fas fa-arrow-left\"></i>\r\n            <span>返回游戏大厅</span>\r\n        </div>\r\n        <div class=\"nav-title\" style=\"margin-top: 30px;\">棋谱操作</div>\r\n        <div class=\"nav-item\" id=\"saveBoardBtn\">\r\n            <i class=\"fas fa-save\"></i>\r\n            <span>保存当前棋局</span>\r\n        </div>\r\n        <div class=\"nav-item\" id=\"loadBoardBtn\">\r\n            <i class=\"fas fa-folder-open\"></i>\r\n            <span>加载已有棋局</span>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- 右侧棋盘区 -->\r\n    <div class=\"content\">\r\n        <!--        <div class=\"content-header\">-->\r\n        <!--            <h1 class=\"content-title\">单人摆谱模式</h1>-->\r\n        <!--            <p class=\"content-subtitle\">自由摆放棋子，研究经典棋局，提升象棋技巧</p>-->\r\n        <!--        </div>-->\r\n\r\n        <div class=\"chess-container\">\r\n            <div class=\"side-indicator\" id=\"sideIndicator\">您当前执：-</div>\r\n            <div class=\"status-info\" id=\"statusInfo\">当前回合: <span id=\"turnIndicator\">红方</span></div>\r\n\r\n            <!-- 象棋棋盘 -->\r\n            <div class=\"chessboard\" id=\"chessboard\">\r\n                <!-- 加载指示器 -->\r\n                <div class=\"loading\" id=\"loadingIndicator\">\r\n                    <i class=\"fas fa-spinner fa-spin\"></i> 初始化棋盘...\r\n                </div>\r\n\r\n                <!-- 棋盘图片已包含所有格线、九宫斜线、点位、楚河汉界和坐标 -->\r\n\r\n                <!-- 棋子动态生成 -->\r\n            </div>\r\n\r\n            <!-- 操作按钮 -->\r\n            <div class=\"controls\">\r\n                <button class=\"control-btn undo-btn\" id=\"undoBtn\">\r\n                    <i class=\"fas fa-undo\"></i>\r\n                    <span>悔棋 (Ctrl+Z)</span>\r\n                </button>\r\n                <button class=\"control-btn restart-btn\" id=\"restartBtn\">\r\n                    <i class=\"fas fa-redo\"></i>\r\n                    <span>重新开始</span>\r\n                </button>\r\n                <button class=\"control-btn hint-btn\" id=\"hintBtn\">\r\n                    <i class=\"fas fa-lightbulb\"></i>\r\n                    <span>提示走法</span>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<!-- 底部信息 -->\r\n<div class=\"footer\">\r\n    © 2023 战弈象棋 - 弘扬国粹，传承棋艺 | 当前版本 v1.0.2\r\n</div>\r\n\r\n<script>\r\n    // 立即检查登录状态（在页面加载前）\r\n    (function() {\r\n        const token = localStorage.getItem('authToken');\r\n        if (!token) {\r\n            alert('请先登录');\r\n            window.location.href = '/index.html';\r\n\r\n        }\r\n    })();\r\n\r\n    // 检查登录状态\r\n    function checkAuth() {\r\n        const token = localStorage.getItem('authToken');\r\n        if (!token) {\r\n            alert('请先登录');\r\n            window.location.href = '/index.html';\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // 页面加载时检查登录状态，并从后端获取阵营更新左侧提示（最简单可靠）\r\n    document.addEventListener('DOMContentLoaded', async function() {\r\n        if (!checkAuth()) return;\r\n        const isOnline = !!(new URLSearchParams(window.location.search)).get('roomId');\r\n        if (!isOnline) return;\r\n        try {\r\n            const token = localStorage.getItem('authToken');\r\n            const resp = await fetch('/api/match/my-color', { headers: { 'Authorization': 'Bearer ' + token } });\r\n            const data = await resp.json();\r\n            if (data && data.success && data.yourColor) {\r\n                yourColor = (data.yourColor || '').toUpperCase();\r\n                const sideIndicator = document.getElementById('sideIndicator');\r\n                if (sideIndicator) sideIndicator.textContent = '您当前执：' + (yourColor === 'RED' ? '红方' : '黑方');\r\n            }\r\n        } catch (_) {}\r\n    });\r\n\r\n    // 全局变量\r\n    let selectedPiece = null;\r\n    let gameState = null;\r\n    const __params = new URLSearchParams(window.location.search);\r\n    const sessionId = __params.get('roomId') || 'single_practice_session';\r\n    let yourColor = (__params.get('color') || '').toUpperCase() || null; // 'RED' | 'BLACK'\r\n    const apiBaseUrl = '/api/chess';\r\n\r\n    // DOM元素\r\n    const chessboard = document.getElementById('chessboard');\r\n    const loadingIndicator = document.getElementById('loadingIndicator');\r\n    const statusInfo = document.getElementById('statusInfo');\r\n    const turnIndicator = document.getElementById('turnIndicator');\r\n    const sideIndicatorEl = document.getElementById('sideIndicator');\r\n    if (yourColor && sideIndicatorEl) {\r\n        sideIndicatorEl.textContent = '您当前执：' + (yourColor === 'RED' ? '红方' : '黑方');\r\n    }\r\n\r\n    // 初始化游戏\r\n    async function initializeGame() {\r\n        showLoading(true);\r\n\r\n        try {\r\n            // 调用后端初始化接口\r\n            const token = localStorage.getItem('authToken');\r\n            const response = await fetch(`${apiBaseUrl}/initialize?sessionId=${sessionId}`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + token,\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (data.success) {\r\n                gameState = data.gameState;\r\n                renderBoard();\r\n                updateTurnIndicator();\r\n            } else {\r\n                console.error('初始化失败:', data.message);\r\n                statusInfo.textContent = '初始化失败，请刷新页面重试';\r\n            }\r\n        } catch (error) {\r\n            console.error('初始化错误:', error);\r\n            statusInfo.textContent = '网络错误，请检查连接';\r\n        } finally {\r\n            showLoading(false);\r\n        }\r\n    }\r\n\r\n    // 启动流程：先尝试获取已有状态，若不存在再初始化\r\n    async function bootGame() {\r\n        try {\r\n            const token = localStorage.getItem('authToken');\r\n            const res = await fetch(`${apiBaseUrl}/state?sessionId=${sessionId}`, {\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + token\r\n                }\r\n            });\r\n            const data = await res.json();\r\n            if (data && data.success && data.gameState) {\r\n                gameState = data.gameState;\r\n                renderBoard();\r\n                updateTurnIndicator();\r\n                return;\r\n            }\r\n        } catch (e) {}\r\n        await initializeGame();\r\n    }\r\n\r\n    // 获取游戏状态\r\n    async function fetchGameState() {\r\n        try {\r\n            const token = localStorage.getItem('authToken');\r\n            const response = await fetch(`${apiBaseUrl}/state?sessionId=${sessionId}`, {\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + token\r\n                }\r\n            });\r\n            const data = await response.json();\r\n\r\n            if (data.success) {\r\n                gameState = data.gameState;\r\n                renderBoard();\r\n                updateTurnIndicator();\r\n            }\r\n        } catch (error) {\r\n            console.error('获取状态失败:', error);\r\n        }\r\n    }\r\n\r\n    // 移动棋子\r\n    async function makeMove(fromX, fromY, toX, toY) {\r\n        showLoading(true);\r\n\r\n        try {\r\n            // 在线模式下通过父窗口 WebSocket 发送\r\n            const isOnline = !!(new URLSearchParams(window.location.search)).get('roomId');\r\n            if (isOnline && window.parent !== window) {\r\n                window.parent.postMessage({ type: 'wsMove', fromX, fromY, toX, toY }, '*');\r\n                return; // 等待房间广播后父页会通知我刷新\r\n            }\r\n            const token = localStorage.getItem('authToken');\r\n            const response = await fetch(\r\n                `${apiBaseUrl}/move?sessionId=${sessionId}&fromX=${fromX}&fromY=${fromY}&toX=${toX}&toY=${toY}`,\r\n                {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Authorization': 'Bearer ' + token,\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                }\r\n            );\r\n\r\n            const data = await response.json();\r\n\r\n            if (data.success) {\r\n                gameState = data.gameState;\r\n                renderBoard();\r\n                updateTurnIndicator();\r\n\r\n                // 显示移动结果\r\n                if (data.move.capturedPiece) {\r\n                    statusInfo.textContent = `${getPieceName(data.move.piece)}移动到(${toX},${toY})，吃掉了${getPieceName(data.move.capturedPiece)}`;\r\n                } else {\r\n                    statusInfo.textContent = `${getPieceName(data.move.piece)}移动到(${toX},${toY})`;\r\n                }\r\n\r\n                // 胜负判定：从后端 boardState 附带的 result 字段提取\r\n                if (gameState && gameState.boardState) {\r\n                    try {\r\n                        const parsed = JSON.parse(gameState.boardState);\r\n                        if (parsed.result === 'RED_WIN' || parsed.result === 'BLACK_WIN') {\r\n                            const msg = parsed.result === 'RED_WIN' ? '红方取胜' : '黑方取胜';\r\n                            alert(msg);\r\n                            await restartGame();\r\n                        }\r\n                    } catch (e) {}\r\n                }\r\n            } else {\r\n                statusInfo.textContent = data.message || '移动失败';\r\n            }\r\n        } catch (error) {\r\n            console.error('移动错误:', error);\r\n            statusInfo.textContent = '网络错误，请重试';\r\n        } finally {\r\n            showLoading(false);\r\n        }\r\n    }\r\n\r\n    // 悔棋\r\n    async function undoMove() {\r\n        showLoading(true);\r\n\r\n        try {\r\n            // 在线模式下通过父窗口 WebSocket 发送\r\n            const isOnline = !!(new URLSearchParams(window.location.search)).get('roomId');\r\n            if (isOnline && window.parent !== window) {\r\n                window.parent.postMessage({ type: 'wsUndo' }, '*');\r\n                return; // 等待房间广播后父页会通知我刷新\r\n            }\r\n            const token = localStorage.getItem('authToken');\r\n            const response = await fetch(`${apiBaseUrl}/undo?sessionId=${sessionId}`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + token,\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (data.success) {\r\n                gameState = data.gameState;\r\n                renderBoard();\r\n                updateTurnIndicator();\r\n                statusInfo.textContent = '悔棋成功';\r\n            } else {\r\n                statusInfo.textContent = data.message || '无法悔棋';\r\n            }\r\n        } catch (error) {\r\n            console.error('悔棋错误:', error);\r\n            statusInfo.textContent = '悔棋失败';\r\n        } finally {\r\n            showLoading(false);\r\n        }\r\n    }\r\n\r\n    // 重新开始\r\n    async function restartGame() {\r\n        showLoading(true);\r\n\r\n        try {\r\n            const token = localStorage.getItem('authToken');\r\n            const response = await fetch(`${apiBaseUrl}/restart?sessionId=${sessionId}`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + token,\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (data.success) {\r\n                gameState = data.gameState;\r\n                renderBoard();\r\n                updateTurnIndicator();\r\n                statusInfo.textContent = '游戏已重置';\r\n            } else {\r\n                statusInfo.textContent = data.message || '重置失败';\r\n            }\r\n        } catch (error) {\r\n            console.error('重置错误:', error);\r\n            statusInfo.textContent = '重置失败';\r\n        } finally {\r\n            showLoading(false);\r\n        }\r\n    }\r\n\r\n    // 修改后的渲染棋盘函数\r\n    function renderBoard() {\r\n        document.querySelectorAll('.piece').forEach(p => p.remove());\r\n        document.querySelectorAll('.valid-move').forEach(v => v.remove());\r\n\r\n        if (!gameState || !gameState.board) return;\r\n\r\n        // 修正行列顺序：后端是10行(y)9列(x)\r\n        for (let y = 0; y < 10; y++) {\r\n            for (let x = 0; x < 9; x++) {\r\n                const piece = gameState.board[y][x];  // 注意这里是[y][x]\r\n                if (piece) {\r\n                    createPieceElement(piece, x, y);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // 修改后的创建棋子函数\r\n    function createPieceElement(piece, x, y) {\r\n        const pieceEl = document.createElement('div');\r\n        pieceEl.className = `piece ${piece.color.toLowerCase()}`;\r\n        pieceEl.dataset.x = x;\r\n        pieceEl.dataset.y = y;\r\n        pieceEl.dataset.type = piece.type;\r\n\r\n        // 设置棋子图片\r\n        const pieceImage = getPieceImage(piece);\r\n        pieceEl.style.backgroundImage = `url('ChessPic/${pieceImage}')`;\r\n\r\n        // 移除文字显示，使用图片\r\n        pieceEl.textContent = '';\r\n\r\n        // 棋子绘制在网格交点\r\n        const gridSize = 66; // 格子大小（从65增加到65.5）\r\n        const boardPadding = 30; // 棋盘内边距\r\n        const pieceOffset = 25; // 棋子偏移量（棋子大小的一半）\r\n\r\n        pieceEl.style.left = `${boardPadding + x * gridSize - pieceOffset}px`;\r\n        pieceEl.style.top = `${boardPadding + y * gridSize - pieceOffset}px`;\r\n        pieceEl.addEventListener('click', handlePieceClick);\r\n        chessboard.appendChild(pieceEl);\r\n    }\r\n\r\n    // 获取棋子图片文件名\r\n    function getPieceImage(piece) {\r\n        const pieceImages = {\r\n            CHE: piece.color === 'RED' ? 'che0.png' : 'che1.png',\r\n            MA: piece.color === 'RED' ? 'ma0.png' : 'ma1.png',\r\n            XIANG: piece.color === 'RED' ? 'xiang0.png' : 'xiang1.png',\r\n            SHI: piece.color === 'RED' ? 'shi0.png' : 'shi1.png',\r\n            BOSS: piece.color === 'RED' ? 'boss0.png' : 'boss1.png',\r\n            PAO: piece.color === 'RED' ? 'pao0.png' : 'pao1.png',\r\n            BING: piece.color === 'RED' ? 'bing0.png' : 'bing1.png'\r\n        };\r\n        return pieceImages[piece.type] || 'bing0.png';\r\n    }\r\n\r\n    // 棋子点击处理\r\n    function handlePieceClick(event) {\r\n        const pieceEl = event.currentTarget;\r\n        const x = parseInt(pieceEl.dataset.x);\r\n        const y = parseInt(pieceEl.dataset.y);\r\n\r\n        // 如果当前没有选中棋子，并且点击的是当前回合的棋子\r\n        if (!selectedPiece && pieceEl.classList.contains(gameState.currentPlayer.toLowerCase())) {\r\n            // 在线模式：仅允许本人颜色操作\r\n            const isOnline = !!(new URLSearchParams(window.location.search)).get('roomId');\r\n            if (isOnline && yourColor && !pieceEl.classList.contains(yourColor.toLowerCase())) {\r\n                statusInfo.textContent = '只能操作己方棋子';\r\n                return;\r\n            }\r\n            selectedPiece = pieceEl;\r\n            pieceEl.classList.add('selected');\r\n            showValidMoves(x, y);\r\n            return;\r\n        }\r\n\r\n        // 如果当前有选中棋子\r\n        if (selectedPiece) {\r\n            const selectedX = parseInt(selectedPiece.dataset.x);\r\n            const selectedY = parseInt(selectedPiece.dataset.y);\r\n\r\n            // 如果点击的是同一个棋子，取消选中\r\n            if (x === selectedX && y === selectedY) {\r\n                selectedPiece.classList.remove('selected');\r\n                selectedPiece = null;\r\n                clearValidMoves();\r\n                return;\r\n            }\r\n\r\n            // 尝试移动棋子\r\n            const isOnline = !!(new URLSearchParams(window.location.search)).get('roomId');\r\n            if (isOnline && yourColor && gameState && gameState.currentPlayer && yourColor !== gameState.currentPlayer) {\r\n                // 取消弹窗提示，仅静默阻止\r\n                selectedPiece.classList.remove('selected');\r\n                selectedPiece = null;\r\n                clearValidMoves();\r\n                return;\r\n            }\r\n            makeMove(selectedX, selectedY, x, y);\r\n\r\n            // 清除选择和移动提示\r\n            selectedPiece.classList.remove('selected');\r\n            selectedPiece = null;\r\n            clearValidMoves();\r\n        }\r\n    }\r\n\r\n    // 显示合法移动位置（从后端获取）\r\n    async function showValidMoves(x, y) {\r\n        try {\r\n            const token = localStorage.getItem('authToken');\r\n            const res = await fetch(`${apiBaseUrl}/valid-moves?sessionId=${sessionId}&fromX=${x}&fromY=${y}`, {\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + token\r\n                }\r\n            });\r\n            const data = await res.json();\r\n            if (!data.success) return;\r\n            if (data.result === 'RED_WIN' || data.result === 'BLACK_WIN') {\r\n                const msg = data.result === 'RED_WIN' ? '红方取胜' : '黑方取胜';\r\n                alert(msg);\r\n                await restartGame();\r\n                return;\r\n            }\r\n            data.moves.forEach(([mx, my]) => {\r\n                const moveIndicator = document.createElement('div');\r\n                moveIndicator.className = 'valid-move';\r\n                // 合法落点绘制在交点\r\n                const gridSize = 66; // 格子大小（从65增加到65.5）\r\n                const boardPadding = 30; // 棋盘内边距\r\n                const indicatorOffset = 8; // 提示点偏移量（提示点大小的一半）\r\n\r\n                moveIndicator.style.left = `${boardPadding + mx * gridSize - indicatorOffset}px`;\r\n                moveIndicator.style.top = `${boardPadding + my * gridSize - indicatorOffset}px`;\r\n                moveIndicator.dataset.x = mx;\r\n                moveIndicator.dataset.y = my;\r\n                moveIndicator.addEventListener('click', handleValidMoveClick);\r\n                chessboard.appendChild(moveIndicator);\r\n            });\r\n        } catch (e) {\r\n            console.error('获取合法走法失败', e);\r\n        }\r\n    }\r\n\r\n    // 合法移动位置点击处理\r\n    function handleValidMoveClick(event) {\r\n        if (!selectedPiece) return;\r\n\r\n        const x = parseInt(event.currentTarget.dataset.x);\r\n        const y = parseInt(event.currentTarget.dataset.y);\r\n        const fromX = parseInt(selectedPiece.dataset.x);\r\n        const fromY = parseInt(selectedPiece.dataset.y);\r\n\r\n        makeMove(fromX, fromY, x, y);\r\n\r\n        selectedPiece.classList.remove('selected');\r\n        selectedPiece = null;\r\n        clearValidMoves();\r\n    }\r\n\r\n    // 清除移动提示\r\n    function clearValidMoves() {\r\n        document.querySelectorAll('.valid-move').forEach(v => v.remove());\r\n    }\r\n\r\n    // 更新回合指示器\r\n    function updateTurnIndicator() {\r\n        if (!gameState) return;\r\n\r\n        turnIndicator.textContent = gameState.currentPlayer === 'RED' ? '红方' : '黑方';\r\n        turnIndicator.style.color = gameState.currentPlayer === 'RED' ? '#b30000' : '#000';\r\n    }\r\n\r\n\r\n\r\n    // 获取棋子名称\r\n    // 修改后的棋子名称映射\r\n    function getPieceName(piece) {\r\n        const pieceNames = {\r\n            CHE: '车',\r\n            MA: '马',\r\n            XIANG: piece.color === 'RED' ? '相' : '象',\r\n            SHI: piece.color === 'RED' ? '仕' : '士',\r\n            BOSS: piece.color === 'RED' ? '帅' : '将',\r\n            PAO: '炮',\r\n            BING: piece.color === 'RED' ? '兵' : '卒'\r\n        };\r\n        return (piece.color === 'RED' ? '红' : '黑') + pieceNames[piece.type];\r\n    }\r\n\r\n    // 显示/隐藏加载指示器\r\n    function showLoading(show) {\r\n        loadingIndicator.style.display = show ? 'block' : 'none';\r\n    }\r\n\r\n    // 事件监听\r\n    document.getElementById('returnBtn').addEventListener('click', () => {\r\n        window.location.href = 'gamebody.html';\r\n    });\r\n\r\n    document.getElementById('undoBtn').addEventListener('click', undoMove);\r\n    document.getElementById('restartBtn').addEventListener('click', restartGame);\r\n\r\n    document.getElementById('hintBtn').addEventListener('click', () => {\r\n        statusInfo.textContent = '提示功能将在后续版本中开放';\r\n    });\r\n\r\n    document.getElementById('saveBoardBtn').addEventListener('click', () => {\r\n        statusInfo.textContent = '保存功能将在后续版本中开放';\r\n    });\r\n\r\n    document.getElementById('loadBoardBtn').addEventListener('click', () => {\r\n        statusInfo.textContent = '加载功能将在后续版本中开放';\r\n    });\r\n\r\n    // 键盘快捷键\r\n    document.addEventListener('keydown', (e) => {\r\n        if (e.ctrlKey && e.key === 'z') {\r\n            undoMove();\r\n        }\r\n    });\r\n\r\n    // 父页面可通过 postMessage 触发刷新\r\n    window.addEventListener('message', (e) => {\r\n        if (!e || !e.data) return;\r\n        if (e.data.type === 'refreshGameState') {\r\n            fetchGameState();\r\n        } else if (e.data.type === 'toast') {\r\n            // 过滤“未到你的回合”的提示，静默处理\r\n            if (e.data.message !== '未到你的回合') {\r\n                alert(e.data.message || '提示');\r\n            }\r\n        } else if (e.data.type === 'yourColor') {\r\n            yourColor = (e.data.color || '').toUpperCase();\r\n            if (yourColor) {\r\n                const sideIndicator = document.getElementById('sideIndicator');\r\n                if (sideIndicator) sideIndicator.textContent = '您当前执：' + (yourColor === 'RED' ? '红方' : '黑方');\r\n            }\r\n        }\r\n    });\r\n\r\n    // 兼容保留：仍支持父页面主动下发 yourColor（不依赖此路径）\r\n\r\n    // 调试功能：显示网格参考线（可选）\r\n    function showGridLines() {\r\n        // 清除现有的参考线\r\n        document.querySelectorAll('.grid-line').forEach(line => line.remove());\r\n\r\n        const gridSize = 66; // 格子大小（从65增加到65.5）\r\n        const boardPadding = 30;\r\n\r\n        // 绘制竖线\r\n        for (let x = 0; x <= 9; x++) {\r\n            const line = document.createElement('div');\r\n            line.className = 'grid-line';\r\n            line.style.position = 'absolute';\r\n            line.style.left = `${boardPadding + x * gridSize}px`;\r\n            line.style.top = `${boardPadding}px`;\r\n            line.style.width = '1px';\r\n            line.style.height = `${10 * gridSize}px`;\r\n            line.style.backgroundColor = 'rgba(255, 0, 0, 0.3)';\r\n            line.style.pointerEvents = 'none';\r\n            line.style.zIndex = '5';\r\n            chessboard.appendChild(line);\r\n        }\r\n\r\n        // 绘制横线\r\n        for (let y = 0; y <= 10; y++) {\r\n            const line = document.createElement('div');\r\n            line.className = 'grid-line';\r\n            line.style.position = 'absolute';\r\n            line.style.left = `${boardPadding}px`;\r\n            line.style.top = `${boardPadding + y * gridSize}px`;\r\n            line.style.width = `${9 * gridSize}px`;\r\n            line.style.height = '1px';\r\n            line.style.backgroundColor = 'rgba(0, 0, 255, 0.3)';\r\n            line.style.pointerEvents = 'none';\r\n            line.style.zIndex = '5';\r\n            chessboard.appendChild(line);\r\n        }\r\n    }\r\n\r\n    // 启动\r\n    bootGame();\r\n\r\n    // 如果需要调试，可以取消注释下面这行来显示网格线\r\n    // showGridLines();\r\n</script>\r\n</body>\r\n</html>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/static/single-practice.html b/src/main/resources/static/single-practice.html
--- a/src/main/resources/static/single-practice.html	(revision 716ce82d69b4353da37fbaabd9d92bf1fd114ab2)
+++ b/src/main/resources/static/single-practice.html	(date 1757063082493)
@@ -587,7 +587,7 @@
     // 初始化游戏
     async function initializeGame() {
         showLoading(true);
-
+        console.log("初始化的调用");
         try {
             // 调用后端初始化接口
             const token = localStorage.getItem('authToken');
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"904309fc-c0cc-49a0-806b-4675d7783840\" name=\"更改\" comment=\"前端页面及后端的登录注册功能，包括jwt权限认证\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/dataSources.local.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/dataSources.local.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/vcs.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/vcs.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/zd/Entity/Board.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/zd/Entity/Board.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/zd/Entity/Piece.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/zd/Entity/Piece.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/zd/Entity/gameState.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/zd/Entity/GameState.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/zd/Interceptor/JwtInterceptor.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/zd/Interceptor/JwtInterceptor.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/zd/Mapper/LoginMapper.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/zd/Mapper/LoginMapper.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/zd/Mapper/RegisterMapper.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/zd/Mapper/RegisterMapper.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/static/single-practice.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/resources/static/single-practice.html\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/com/zd/Interceptor/JwtInterceptor.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/com/zd/Interceptor/JwtInterceptor.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/com/zd/dto/LoginRequest.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/com/zd/dto/LoginRequest.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/com/zd/dto/RegisterResponse.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/com/zd/dto/RegisterResponse.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/static/gamebody.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/static/gamebody.html\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/static/match.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/static/match.html\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/static/matching.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/static/matching.html\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/static/single-practice.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/static/single-practice.html\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Enum\" />\r\n        <option value=\"Interface\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;DZ-code-hub&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/DZ-code-hub/zhanyi-Chess.git&quot;,\r\n    &quot;accountId&quot;: &quot;5f986131-9648-4eac-a19d-0142bd579b60&quot;\r\n  }\r\n}</component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"generalSettings\">\r\n      <MavenGeneralSettings>\r\n        <option name=\"mavenHomeTypeForPersistence\" value=\"WRAPPER\" />\r\n        <option name=\"userSettingsFile\" value=\"D:\\Maven\\apache-maven-3.9.9-bin\\apache-maven-3.9.9\\conf\\settings.xml\" />\r\n      </MavenGeneralSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"MavenRunner\">\r\n    <option name=\"jreName\" value=\"17\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;customColor&quot;: &quot;&quot;,\r\n  &quot;associatedIndex&quot;: 5\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"32DNz8pSLmMoMqkgYIftM5fnG7k\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"1\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Maven.zhanyi-Chess [org.apache.maven.plugins:maven-compiler-plugin:3.14.0:compile].executor&quot;: &quot;Run&quot;,\r\n    &quot;RequestMappingsPanelOrder0&quot;: &quot;0&quot;,\r\n    &quot;RequestMappingsPanelOrder1&quot;: &quot;1&quot;,\r\n    &quot;RequestMappingsPanelWidth0&quot;: &quot;75&quot;,\r\n    &quot;RequestMappingsPanelWidth1&quot;: &quot;75&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;Spring Boot.ZhanyiChessApplication.executor&quot;: &quot;Run&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\r\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;D:/javaProject/zhanyi-Chess&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;项目&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;org.jetbrains.plugins.github.ui.GithubSettingsConfigurable&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  },\r\n  &quot;keyToStringList&quot;: {\r\n    &quot;ChangesTree.GroupingKeys&quot;: [\r\n      &quot;directory&quot;,\r\n      &quot;module&quot;\r\n    ],\r\n    &quot;DatabaseDriversLRU&quot;: [\r\n      &quot;mysql&quot;\r\n    ]\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\javaProject\\zhanyi-Chess\\src\\main\\resources\" />\r\n      <recent name=\"D:\\javaProject\\zhanyi-Chess\\src\\main\\resources\\static\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\javaProject\\zhanyi-Chess\\src\\main\\resources\\\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"ZhanyiChessApplication\" type=\"SpringBootApplicationConfigurationType\" factoryName=\"Spring Boot\" nameIsGenerated=\"true\">\r\n      <module name=\"zhanyi-Chess\" />\r\n      <option name=\"SPRING_BOOT_MAIN_CLASS\" value=\"com.zd.ZhanyiChessApplication\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-jdk-9823dce3aa75-28b599e66164-intellij.indexing.shared.core-IU-242.23726.103\" />\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-5c90d61e3bab-JavaScript-IU-242.23726.103\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"应用程序级\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"默认任务\">\r\n      <changelist id=\"904309fc-c0cc-49a0-806b-4675d7783840\" name=\"更改\" comment=\"\" />\r\n      <created>1756951443276</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1756951443276</updated>\r\n      <workItem from=\"1756951444299\" duration=\"49000\" />\r\n      <workItem from=\"1756951508051\" duration=\"18000\" />\r\n      <workItem from=\"1756951564510\" duration=\"15000\" />\r\n      <workItem from=\"1756951601195\" duration=\"132000\" />\r\n      <workItem from=\"1756951740095\" duration=\"3747000\" />\r\n      <workItem from=\"1756955538240\" duration=\"12597000\" />\r\n      <workItem from=\"1757039252209\" duration=\"13377000\" />\r\n      <workItem from=\"1757060684072\" duration=\"230000\" />\r\n      <workItem from=\"1757062436815\" duration=\"47000\" />\r\n      <workItem from=\"1757062514377\" duration=\"12000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"前端页面及后端的登录注册功能，包括jwt权限认证\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1757039540990</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1757039540990</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"CHECK_CODE_CLEANUP_BEFORE_PROJECT_COMMIT_PROFILE\" value=\"Project Default\" />\r\n    <option name=\"CHECK_CODE_CLEANUP_BEFORE_PROJECT_COMMIT\" value=\"true\" />\r\n    <MESSAGE value=\"前端页面及后端的登录注册功能，包括jwt权限认证\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"前端页面及后端的登录注册功能，包括jwt权限认证\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 716ce82d69b4353da37fbaabd9d92bf1fd114ab2)
+++ b/.idea/workspace.xml	(date 1757063205943)
@@ -4,23 +4,8 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="904309fc-c0cc-49a0-806b-4675d7783840" name="更改" comment="前端页面及后端的登录注册功能，包括jwt权限认证">
-      <change beforePath="$PROJECT_DIR$/.idea/dataSources.local.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dataSources.local.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/vcs.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/zd/Entity/Board.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/zd/Entity/Board.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/zd/Entity/Piece.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/zd/Entity/Piece.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/zd/Entity/gameState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/zd/Entity/GameState.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/zd/Interceptor/JwtInterceptor.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/zd/Interceptor/JwtInterceptor.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/zd/Mapper/LoginMapper.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/zd/Mapper/LoginMapper.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/zd/Mapper/RegisterMapper.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/zd/Mapper/RegisterMapper.java" afterDir="false" />
+    <list default="true" id="904309fc-c0cc-49a0-806b-4675d7783840" name="更改" comment="">
       <change beforePath="$PROJECT_DIR$/src/main/resources/static/single-practice.html" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/static/single-practice.html" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/com/zd/Interceptor/JwtInterceptor.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/com/zd/Interceptor/JwtInterceptor.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/com/zd/dto/LoginRequest.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/com/zd/dto/LoginRequest.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/com/zd/dto/RegisterResponse.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/com/zd/dto/RegisterResponse.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/static/gamebody.html" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/static/gamebody.html" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/static/match.html" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/static/match.html" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/static/matching.html" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/static/matching.html" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/classes/static/single-practice.html" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/static/single-practice.html" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
Index: target/classes/static/single-practice.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"zh-CN\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>战弈象棋 - 单人摆谱</title>\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\r\n    <style>\r\n        /* 基础重置 */\r\n        * {\r\n            margin: 0;\r\n            padding: 0;\r\n            box-sizing: border-box;\r\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n        }\r\n\r\n        body {\r\n            background: linear-gradient(135deg, #6e8efb, #a777e3);\r\n            color: #333;\r\n            min-height: 100vh;\r\n            display: flex;\r\n            flex-direction: column;\r\n        }\r\n\r\n        /* 顶部导航栏 */\r\n        .top-nav {\r\n            background: rgba(255, 255, 255, 0.95);\r\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n            padding: 15px 30px;\r\n            display: flex;\r\n            justify-content: space-between;\r\n            align-items: center;\r\n        }\r\n\r\n        .logo {\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 15px;\r\n        }\r\n\r\n        .logo-icon {\r\n            width: 45px;\r\n            height: 45px;\r\n            background: linear-gradient(135deg, #6e8efb, #a777e3);\r\n            border-radius: 50%;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n        }\r\n\r\n        .logo-icon i {\r\n            font-size: 24px;\r\n            color: white;\r\n        }\r\n\r\n        .logo-text {\r\n            font-size: 24px;\r\n            font-weight: 700;\r\n            background: linear-gradient(135deg, #6e8efb, #a777e3);\r\n            -webkit-background-clip: text;\r\n            -webkit-text-fill-color: transparent;\r\n        }\r\n\r\n        .user-info {\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 15px;\r\n        }\r\n\r\n        .user-avatar {\r\n            width: 40px;\r\n            height: 40px;\r\n            border-radius: 50%;\r\n            background: linear-gradient(135deg, #6e8efb, #a777e3);\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            color: white;\r\n            font-weight: bold;\r\n            font-size: 18px;\r\n        }\r\n\r\n        .user-name {\r\n            font-weight: 600;\r\n        }\r\n\r\n        .nav-controls {\r\n            display: flex;\r\n            gap: 15px;\r\n        }\r\n\r\n        .nav-btn {\r\n            width: 40px;\r\n            height: 40px;\r\n            border-radius: 50%;\r\n            background: #f5f7ff;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            cursor: pointer;\r\n            transition: all 0.3s;\r\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n        }\r\n\r\n        .nav-btn:hover {\r\n            background: #eef0ff;\r\n            transform: translateY(-2px);\r\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);\r\n        }\r\n\r\n        /* 主内容区 */\r\n        .main-container {\r\n            display: flex;\r\n            flex: 1;\r\n            padding: 20px;\r\n            gap: 20px;\r\n        }\r\n\r\n        /* 左侧导航栏 */\r\n        .sidebar {\r\n            width: 260px;\r\n            background: rgba(255, 255, 255, 0.95);\r\n            border-radius: 16px;\r\n            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\r\n            padding: 20px;\r\n            height: fit-content;\r\n        }\r\n\r\n        .nav-title {\r\n            font-size: 18px;\r\n            font-weight: 600;\r\n            margin-bottom: 20px;\r\n            padding-bottom: 10px;\r\n            border-bottom: 1px solid #eee;\r\n            color: #555;\r\n        }\r\n\r\n        .nav-item {\r\n            padding: 12px 15px;\r\n            border-radius: 10px;\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 12px;\r\n            margin-bottom: 8px;\r\n            cursor: pointer;\r\n            transition: all 0.3s;\r\n        }\r\n\r\n        .nav-item i {\r\n            width: 24px;\r\n            text-align: center;\r\n            color: #6e8efb;\r\n        }\r\n\r\n        .nav-item:hover {\r\n            background: #f5f7ff;\r\n        }\r\n\r\n        /* 右侧内容区 */\r\n        .content {\r\n            flex: 1;\r\n            background: rgba(255, 255, 255, 0.95);\r\n            border-radius: 16px;\r\n            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\r\n            padding: 30px;\r\n            display: flex;\r\n            flex-direction: column;\r\n        }\r\n\r\n        .content-header {\r\n            margin-bottom: 30px;\r\n            text-align: center;\r\n        }\r\n\r\n        .content-title {\r\n            font-size: 28px;\r\n            font-weight: 700;\r\n            margin-bottom: 10px;\r\n            background: linear-gradient(135deg, #6e8efb, #a777e3);\r\n            -webkit-background-clip: text;\r\n            -webkit-text-fill-color: transparent;\r\n        }\r\n\r\n        .content-subtitle {\r\n            color: #777;\r\n            font-size: 16px;\r\n            margin-bottom: 25px;\r\n        }\r\n\r\n        /* 棋盘容器 */\r\n        .chess-container {\r\n            flex: 1;\r\n            display: flex;\r\n            flex-direction: column;\r\n            align-items: center;\r\n            justify-content: center;\r\n            position: relative;\r\n        }\r\n\r\n        /* 核心：棋盘样式 */\r\n        .chessboard {\r\n            width: 600px; /* 外框宽度：左右各30像素边距 + 9列×60 */\r\n            height: 660px; /* 外框高度：上下各30像素边距 + 10行×60 */\r\n            background-image: url('ChessPic/qipan.jpg'); /* 使用棋盘图片 */\r\n            background-size: cover;\r\n            background-position: center;\r\n            border: 3px solid #8B4513; /* 深棕色边框 */\r\n            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\r\n            position: relative;\r\n            margin: 0 auto;\r\n        }\r\n\r\n        /* 棋盘左侧阵营提示 */\r\n        .side-indicator {\r\n            position: absolute;\r\n            left: calc(50% - 600px/2 - 140px); /* 棋盘左侧再向左偏移一定距离 */\r\n            top: 50%;\r\n            transform: translateY(-50%);\r\n            width: 120px;\r\n            padding: 10px 12px;\r\n            border-radius: 10px;\r\n            background: rgba(255,255,255,0.9);\r\n            box-shadow: 0 4px 12px rgba(0,0,0,0.15);\r\n            color: #333;\r\n            text-align: center;\r\n            font-weight: 600;\r\n            line-height: 1.4;\r\n        }\r\n\r\n        /* 棋盘网格配置 */\r\n        :root {\r\n            --grid-size: 66px; /* 每个格子的大小（从65px增加到65.5px） */\r\n            --board-padding: 30px; /* 棋盘内边距 */\r\n            --piece-size: 50px; /* 棋子大小 */\r\n        }\r\n\r\n        /* 格线 - 隐藏CSS格线，使用图片中的格线 */\r\n        .chessboard::before {\r\n            display: none; /* 隐藏CSS格线，使用图片中的格线 */\r\n        }\r\n\r\n        /* 九宫格斜线 - 隐藏，使用图片中的斜线 */\r\n        .palace-lines {\r\n            display: none; /* 隐藏九宫斜线，使用图片中的斜线 */\r\n        }\r\n\r\n        /* 九宫九点 - 隐藏，使用图片中的点位 */\r\n        .palace-dots {\r\n            display: none; /* 隐藏九宫点位，使用图片中的点位 */\r\n        }\r\n\r\n        /* 楚河汉界 - 隐藏，使用图片中的文字 */\r\n        .river {\r\n            display: none; /* 隐藏楚河汉界，使用图片中的文字 */\r\n        }\r\n\r\n        /* 坐标数字 - 隐藏，使用图片中的坐标 */\r\n        .coordinates {\r\n            display: none; /* 隐藏坐标数字，使用图片中的坐标 */\r\n        }\r\n\r\n        /* 棋子样式 */\r\n        .piece {\r\n            width: 50px; /* 调整棋子大小，确保与棋盘格子匹配 */\r\n            height: 50px;\r\n            border-radius: 50%;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            font-size: 22px;\r\n            font-weight: bold;\r\n            cursor: pointer;\r\n            transition: transform 0.2s ease, box-shadow 0.2s ease;\r\n            position: absolute;\r\n            z-index: 10;\r\n            user-select: none;\r\n            background-size: cover;\r\n            background-position: center;\r\n            background-repeat: no-repeat;\r\n        }\r\n\r\n        /* 选中状态 */\r\n        .piece.selected {\r\n            box-shadow: 0 0 0 3px #ffcc00;\r\n            transform: scale(1.1);\r\n            z-index: 20;\r\n        }\r\n\r\n        /* 红方棋子 */\r\n        .piece.red {\r\n            background-color: #ffdddd;\r\n            color: #b30000;\r\n            border: 2px solid #b30000;\r\n            box-shadow: 0 3px 6px rgba(179, 0, 0, 0.2);\r\n        }\r\n\r\n        /* 黑方棋子 */\r\n        .piece.black {\r\n            background-color: #fff;\r\n            color: #000;\r\n            border: 2px solid #000;\r\n            box-shadow: 0 3px 6px rgba(0, 0, 0, 0.2);\r\n        }\r\n\r\n        .piece:hover:not(.selected) {\r\n            transform: scale(1.1);\r\n            box-shadow: 0 5px 10px rgba(0, 0, 0, 0.3);\r\n            z-index: 15;\r\n        }\r\n\r\n        /* 合法移动提示 */\r\n        .valid-move {\r\n            position: absolute;\r\n            width: 16px;\r\n            height: 16px;\r\n            border-radius: 50%;\r\n            background-color: rgba(0, 200, 0, 0.3);\r\n            z-index: 15;\r\n            pointer-events: auto;\r\n            cursor: pointer;\r\n        }\r\n\r\n        /* 操作按钮 */\r\n        .controls {\r\n            margin-top: 30px;\r\n            display: flex;\r\n            justify-content: center;\r\n            gap: 20px;\r\n        }\r\n\r\n        .control-btn {\r\n            padding: 12px 30px;\r\n            border: none;\r\n            border-radius: 50px;\r\n            font-size: 16px;\r\n            font-weight: 600;\r\n            cursor: pointer;\r\n            transition: all 0.3s;\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 8px;\r\n        }\r\n\r\n        .undo-btn {\r\n            background: linear-gradient(135deg, #6e8efb, #a777e3);\r\n            color: white;\r\n            box-shadow: 0 4px 10px rgba(110, 142, 251, 0.4);\r\n        }\r\n\r\n        .undo-btn:hover {\r\n            transform: translateY(-2px);\r\n            box-shadow: 0 6px 15px rgba(110, 142, 251, 0.6);\r\n        }\r\n\r\n        .restart-btn {\r\n            background: linear-gradient(135deg, #4CAF50, #2E7D32);\r\n            color: white;\r\n            box-shadow: 0 4px 10px rgba(76, 175, 80, 0.4);\r\n        }\r\n\r\n        .restart-btn:hover {\r\n            transform: translateY(-2px);\r\n            box-shadow: 0 6px 15px rgba(76, 175, 80, 0.6);\r\n        }\r\n\r\n        .hint-btn {\r\n            background: linear-gradient(135deg, #FFC107, #FF9800);\r\n            color: white;\r\n            box-shadow: 0 4px 10px rgba(255, 193, 7, 0.4);\r\n        }\r\n\r\n        .hint-btn:hover {\r\n            transform: translateY(-2px);\r\n            box-shadow: 0 6px 15px rgba(255, 193, 7, 0.6);\r\n        }\r\n\r\n        /* 状态提示 */\r\n        .status-info {\r\n            margin-top: 15px;\r\n            text-align: center;\r\n            font-weight: 500;\r\n            color: #444;\r\n            height: 24px;\r\n        }\r\n\r\n        /* 底部信息 */\r\n        .footer {\r\n            text-align: center;\r\n            padding: 20px;\r\n            color: rgba(255, 255, 255, 0.8);\r\n            font-size: 14px;\r\n            margin-top: auto;\r\n        }\r\n\r\n        /* 加载指示器 */\r\n        .loading {\r\n            position: absolute;\r\n            top: 50%;\r\n            left: 50%;\r\n            transform: translate(-50%, -50%);\r\n            font-size: 24px;\r\n            color: #8B4513;\r\n            z-index: 100;\r\n        }\r\n\r\n        /* 响应式调整 */\r\n        @media (max-width: 900px) {\r\n            .main-container {\r\n                flex-direction: column;\r\n            }\r\n\r\n            .sidebar {\r\n                width: 100%;\r\n            }\r\n        }\r\n\r\n        @media (max-width: 600px) {\r\n            .chessboard {\r\n                width: 450px;\r\n                height: 500px;\r\n                grid-template-columns: repeat(9, 50px);\r\n                grid-template-rows: repeat(10, 50px);\r\n            }\r\n\r\n            .piece {\r\n                width: 40px;\r\n                height: 40px;\r\n                font-size: 20px;\r\n            }\r\n\r\n            .controls {\r\n                flex-wrap: wrap;\r\n            }\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n<!-- 顶部导航栏 -->\r\n<nav class=\"top-nav\">\r\n    <div class=\"logo\">\r\n        <div class=\"logo-icon\">\r\n            <i class=\"fas fa-chess-rook\"></i>\r\n        </div>\r\n        <div class=\"logo-text\">战弈象棋</div>\r\n    </div>\r\n    <div class=\"user-info\">\r\n        <div class=\"user-avatar\">张</div>\r\n        <div class=\"user-name\">张棋手</div>\r\n    </div>\r\n    <div class=\"nav-controls\">\r\n        <div class=\"nav-btn\">\r\n            <i class=\"fas fa-bell\"></i>\r\n        </div>\r\n        <div class=\"nav-btn\">\r\n            <i class=\"fas fa-cog\"></i>\r\n        </div>\r\n        <div class=\"nav-btn\">\r\n            <i class=\"fas fa-sign-out-alt\"></i>\r\n        </div>\r\n    </div>\r\n</nav>\r\n\r\n<!-- 主内容区 -->\r\n<div class=\"main-container\">\r\n    <!-- 左侧返回栏 -->\r\n    <div class=\"sidebar\">\r\n        <div class=\"nav-title\">游戏功能</div>\r\n        <div class=\"nav-item\" id=\"returnBtn\">\r\n            <i class=\"fas fa-arrow-left\"></i>\r\n            <span>返回游戏大厅</span>\r\n        </div>\r\n        <div class=\"nav-title\" style=\"margin-top: 30px;\">棋谱操作</div>\r\n        <div class=\"nav-item\" id=\"saveBoardBtn\">\r\n            <i class=\"fas fa-save\"></i>\r\n            <span>保存当前棋局</span>\r\n        </div>\r\n        <div class=\"nav-item\" id=\"loadBoardBtn\">\r\n            <i class=\"fas fa-folder-open\"></i>\r\n            <span>加载已有棋局</span>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- 右侧棋盘区 -->\r\n    <div class=\"content\">\r\n        <!--        <div class=\"content-header\">-->\r\n        <!--            <h1 class=\"content-title\">单人摆谱模式</h1>-->\r\n        <!--            <p class=\"content-subtitle\">自由摆放棋子，研究经典棋局，提升象棋技巧</p>-->\r\n        <!--        </div>-->\r\n\r\n        <div class=\"chess-container\">\r\n            <div class=\"side-indicator\" id=\"sideIndicator\">您当前执：-</div>\r\n            <div class=\"status-info\" id=\"statusInfo\">当前回合: <span id=\"turnIndicator\">红方</span></div>\r\n\r\n            <!-- 象棋棋盘 -->\r\n            <div class=\"chessboard\" id=\"chessboard\">\r\n                <!-- 加载指示器 -->\r\n                <div class=\"loading\" id=\"loadingIndicator\">\r\n                    <i class=\"fas fa-spinner fa-spin\"></i> 初始化棋盘...\r\n                </div>\r\n\r\n                <!-- 棋盘图片已包含所有格线、九宫斜线、点位、楚河汉界和坐标 -->\r\n\r\n                <!-- 棋子动态生成 -->\r\n            </div>\r\n\r\n            <!-- 操作按钮 -->\r\n            <div class=\"controls\">\r\n                <button class=\"control-btn undo-btn\" id=\"undoBtn\">\r\n                    <i class=\"fas fa-undo\"></i>\r\n                    <span>悔棋 (Ctrl+Z)</span>\r\n                </button>\r\n                <button class=\"control-btn restart-btn\" id=\"restartBtn\">\r\n                    <i class=\"fas fa-redo\"></i>\r\n                    <span>重新开始</span>\r\n                </button>\r\n                <button class=\"control-btn hint-btn\" id=\"hintBtn\">\r\n                    <i class=\"fas fa-lightbulb\"></i>\r\n                    <span>提示走法</span>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<!-- 底部信息 -->\r\n<div class=\"footer\">\r\n    © 2023 战弈象棋 - 弘扬国粹，传承棋艺 | 当前版本 v1.0.2\r\n</div>\r\n\r\n<script>\r\n    // 立即检查登录状态（在页面加载前）\r\n    (function() {\r\n        const token = localStorage.getItem('authToken');\r\n        if (!token) {\r\n            alert('请先登录');\r\n            window.location.href = '/index.html';\r\n            return;\r\n        }\r\n    })();\r\n\r\n    // 检查登录状态\r\n    function checkAuth() {\r\n        const token = localStorage.getItem('authToken');\r\n        if (!token) {\r\n            alert('请先登录');\r\n            window.location.href = '/index.html';\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // 页面加载时检查登录状态，并从后端获取阵营更新左侧提示（最简单可靠）\r\n    document.addEventListener('DOMContentLoaded', async function() {\r\n        if (!checkAuth()) return;\r\n        const isOnline = !!(new URLSearchParams(window.location.search)).get('roomId');\r\n        if (!isOnline) return;\r\n        try {\r\n            const token = localStorage.getItem('authToken');\r\n            const resp = await fetch('/api/match/my-color', { headers: { 'Authorization': 'Bearer ' + token } });\r\n            const data = await resp.json();\r\n            if (data && data.success && data.yourColor) {\r\n                yourColor = (data.yourColor || '').toUpperCase();\r\n                const sideIndicator = document.getElementById('sideIndicator');\r\n                if (sideIndicator) sideIndicator.textContent = '您当前执：' + (yourColor === 'RED' ? '红方' : '黑方');\r\n            }\r\n        } catch (_) {}\r\n    });\r\n\r\n    // 全局变量\r\n    let selectedPiece = null;\r\n    let gameState = null;\r\n    const __params = new URLSearchParams(window.location.search);\r\n    const sessionId = __params.get('roomId') || 'single_practice_session';\r\n    let yourColor = (__params.get('color') || '').toUpperCase() || null; // 'RED' | 'BLACK'\r\n    const apiBaseUrl = '/api/chess';\r\n\r\n    // DOM元素\r\n    const chessboard = document.getElementById('chessboard');\r\n    const loadingIndicator = document.getElementById('loadingIndicator');\r\n    const statusInfo = document.getElementById('statusInfo');\r\n    const turnIndicator = document.getElementById('turnIndicator');\r\n    const sideIndicatorEl = document.getElementById('sideIndicator');\r\n    if (yourColor && sideIndicatorEl) {\r\n        sideIndicatorEl.textContent = '您当前执：' + (yourColor === 'RED' ? '红方' : '黑方');\r\n    }\r\n\r\n    // 初始化游戏\r\n    async function initializeGame() {\r\n        showLoading(true);\r\n\r\n        try {\r\n            // 调用后端初始化接口\r\n            const token = localStorage.getItem('authToken');\r\n            const response = await fetch(`${apiBaseUrl}/initialize?sessionId=${sessionId}`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + token,\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (data.success) {\r\n                gameState = data.gameState;\r\n                renderBoard();\r\n                updateTurnIndicator();\r\n            } else {\r\n                console.error('初始化失败:', data.message);\r\n                statusInfo.textContent = '初始化失败，请刷新页面重试';\r\n            }\r\n        } catch (error) {\r\n            console.error('初始化错误:', error);\r\n            statusInfo.textContent = '网络错误，请检查连接';\r\n        } finally {\r\n            showLoading(false);\r\n        }\r\n    }\r\n\r\n    // 启动流程：先尝试获取已有状态，若不存在再初始化\r\n    async function bootGame() {\r\n        try {\r\n            const token = localStorage.getItem('authToken');\r\n            const res = await fetch(`${apiBaseUrl}/state?sessionId=${sessionId}`, {\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + token\r\n                }\r\n            });\r\n            const data = await res.json();\r\n            if (data && data.success && data.gameState) {\r\n                gameState = data.gameState;\r\n                renderBoard();\r\n                updateTurnIndicator();\r\n                return;\r\n            }\r\n        } catch (e) {}\r\n        await initializeGame();\r\n    }\r\n\r\n    // 获取游戏状态\r\n    async function fetchGameState() {\r\n        try {\r\n            const token = localStorage.getItem('authToken');\r\n            const response = await fetch(`${apiBaseUrl}/state?sessionId=${sessionId}`, {\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + token\r\n                }\r\n            });\r\n            const data = await response.json();\r\n\r\n            if (data.success) {\r\n                gameState = data.gameState;\r\n                renderBoard();\r\n                updateTurnIndicator();\r\n            }\r\n        } catch (error) {\r\n            console.error('获取状态失败:', error);\r\n        }\r\n    }\r\n\r\n    // 移动棋子\r\n    async function makeMove(fromX, fromY, toX, toY) {\r\n        showLoading(true);\r\n\r\n        try {\r\n            // 在线模式下通过父窗口 WebSocket 发送\r\n            const isOnline = !!(new URLSearchParams(window.location.search)).get('roomId');\r\n            if (isOnline && window.parent !== window) {\r\n                window.parent.postMessage({ type: 'wsMove', fromX, fromY, toX, toY }, '*');\r\n                return; // 等待房间广播后父页会通知我刷新\r\n            }\r\n            const token = localStorage.getItem('authToken');\r\n            const response = await fetch(\r\n                `${apiBaseUrl}/move?sessionId=${sessionId}&fromX=${fromX}&fromY=${fromY}&toX=${toX}&toY=${toY}`,\r\n                {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Authorization': 'Bearer ' + token,\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                }\r\n            );\r\n\r\n            const data = await response.json();\r\n\r\n            if (data.success) {\r\n                gameState = data.gameState;\r\n                renderBoard();\r\n                updateTurnIndicator();\r\n\r\n                // 显示移动结果\r\n                if (data.move.capturedPiece) {\r\n                    statusInfo.textContent = `${getPieceName(data.move.piece)}移动到(${toX},${toY})，吃掉了${getPieceName(data.move.capturedPiece)}`;\r\n                } else {\r\n                    statusInfo.textContent = `${getPieceName(data.move.piece)}移动到(${toX},${toY})`;\r\n                }\r\n\r\n                // 胜负判定：从后端 boardState 附带的 result 字段提取\r\n                if (gameState && gameState.boardState) {\r\n                    try {\r\n                        const parsed = JSON.parse(gameState.boardState);\r\n                        if (parsed.result === 'RED_WIN' || parsed.result === 'BLACK_WIN') {\r\n                            const msg = parsed.result === 'RED_WIN' ? '红方取胜' : '黑方取胜';\r\n                            alert(msg);\r\n                            await restartGame();\r\n                        }\r\n                    } catch (e) {}\r\n                }\r\n            } else {\r\n                statusInfo.textContent = data.message || '移动失败';\r\n            }\r\n        } catch (error) {\r\n            console.error('移动错误:', error);\r\n            statusInfo.textContent = '网络错误，请重试';\r\n        } finally {\r\n            showLoading(false);\r\n        }\r\n    }\r\n\r\n    // 悔棋\r\n    async function undoMove() {\r\n        showLoading(true);\r\n\r\n        try {\r\n            // 在线模式下通过父窗口 WebSocket 发送\r\n            const isOnline = !!(new URLSearchParams(window.location.search)).get('roomId');\r\n            if (isOnline && window.parent !== window) {\r\n                window.parent.postMessage({ type: 'wsUndo' }, '*');\r\n                return; // 等待房间广播后父页会通知我刷新\r\n            }\r\n            const token = localStorage.getItem('authToken');\r\n            const response = await fetch(`${apiBaseUrl}/undo?sessionId=${sessionId}`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + token,\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (data.success) {\r\n                gameState = data.gameState;\r\n                renderBoard();\r\n                updateTurnIndicator();\r\n                statusInfo.textContent = '悔棋成功';\r\n            } else {\r\n                statusInfo.textContent = data.message || '无法悔棋';\r\n            }\r\n        } catch (error) {\r\n            console.error('悔棋错误:', error);\r\n            statusInfo.textContent = '悔棋失败';\r\n        } finally {\r\n            showLoading(false);\r\n        }\r\n    }\r\n\r\n    // 重新开始\r\n    async function restartGame() {\r\n        showLoading(true);\r\n\r\n        try {\r\n            const token = localStorage.getItem('authToken');\r\n            const response = await fetch(`${apiBaseUrl}/restart?sessionId=${sessionId}`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + token,\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (data.success) {\r\n                gameState = data.gameState;\r\n                renderBoard();\r\n                updateTurnIndicator();\r\n                statusInfo.textContent = '游戏已重置';\r\n            } else {\r\n                statusInfo.textContent = data.message || '重置失败';\r\n            }\r\n        } catch (error) {\r\n            console.error('重置错误:', error);\r\n            statusInfo.textContent = '重置失败';\r\n        } finally {\r\n            showLoading(false);\r\n        }\r\n    }\r\n\r\n    // 修改后的渲染棋盘函数\r\n    function renderBoard() {\r\n        document.querySelectorAll('.piece').forEach(p => p.remove());\r\n        document.querySelectorAll('.valid-move').forEach(v => v.remove());\r\n\r\n        if (!gameState || !gameState.board) return;\r\n\r\n        // 修正行列顺序：后端是10行(y)9列(x)\r\n        for (let y = 0; y < 10; y++) {\r\n            for (let x = 0; x < 9; x++) {\r\n                const piece = gameState.board[y][x];  // 注意这里是[y][x]\r\n                if (piece) {\r\n                    createPieceElement(piece, x, y);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // 修改后的创建棋子函数\r\n    function createPieceElement(piece, x, y) {\r\n        const pieceEl = document.createElement('div');\r\n        pieceEl.className = `piece ${piece.color.toLowerCase()}`;\r\n        pieceEl.dataset.x = x;\r\n        pieceEl.dataset.y = y;\r\n        pieceEl.dataset.type = piece.type;\r\n\r\n        // 设置棋子图片\r\n        const pieceImage = getPieceImage(piece);\r\n        pieceEl.style.backgroundImage = `url('ChessPic/${pieceImage}')`;\r\n\r\n        // 移除文字显示，使用图片\r\n        pieceEl.textContent = '';\r\n\r\n        // 棋子绘制在网格交点\r\n        const gridSize = 66; // 格子大小（从65增加到65.5）\r\n        const boardPadding = 30; // 棋盘内边距\r\n        const pieceOffset = 25; // 棋子偏移量（棋子大小的一半）\r\n\r\n        pieceEl.style.left = `${boardPadding + x * gridSize - pieceOffset}px`;\r\n        pieceEl.style.top = `${boardPadding + y * gridSize - pieceOffset}px`;\r\n        pieceEl.addEventListener('click', handlePieceClick);\r\n        chessboard.appendChild(pieceEl);\r\n    }\r\n\r\n    // 获取棋子图片文件名\r\n    function getPieceImage(piece) {\r\n        const pieceImages = {\r\n            CHE: piece.color === 'RED' ? 'che0.png' : 'che1.png',\r\n            MA: piece.color === 'RED' ? 'ma0.png' : 'ma1.png',\r\n            XIANG: piece.color === 'RED' ? 'xiang0.png' : 'xiang1.png',\r\n            SHI: piece.color === 'RED' ? 'shi0.png' : 'shi1.png',\r\n            BOSS: piece.color === 'RED' ? 'boss0.png' : 'boss1.png',\r\n            PAO: piece.color === 'RED' ? 'pao0.png' : 'pao1.png',\r\n            BING: piece.color === 'RED' ? 'bing0.png' : 'bing1.png'\r\n        };\r\n        return pieceImages[piece.type] || 'bing0.png';\r\n    }\r\n\r\n    // 棋子点击处理\r\n    function handlePieceClick(event) {\r\n        const pieceEl = event.currentTarget;\r\n        const x = parseInt(pieceEl.dataset.x);\r\n        const y = parseInt(pieceEl.dataset.y);\r\n\r\n        // 如果当前没有选中棋子，并且点击的是当前回合的棋子\r\n        if (!selectedPiece && pieceEl.classList.contains(gameState.currentPlayer.toLowerCase())) {\r\n            // 在线模式：仅允许本人颜色操作\r\n            const isOnline = !!(new URLSearchParams(window.location.search)).get('roomId');\r\n            if (isOnline && yourColor && !pieceEl.classList.contains(yourColor.toLowerCase())) {\r\n                statusInfo.textContent = '只能操作己方棋子';\r\n                return;\r\n            }\r\n            selectedPiece = pieceEl;\r\n            pieceEl.classList.add('selected');\r\n            showValidMoves(x, y);\r\n            return;\r\n        }\r\n\r\n        // 如果当前有选中棋子\r\n        if (selectedPiece) {\r\n            const selectedX = parseInt(selectedPiece.dataset.x);\r\n            const selectedY = parseInt(selectedPiece.dataset.y);\r\n\r\n            // 如果点击的是同一个棋子，取消选中\r\n            if (x === selectedX && y === selectedY) {\r\n                selectedPiece.classList.remove('selected');\r\n                selectedPiece = null;\r\n                clearValidMoves();\r\n                return;\r\n            }\r\n\r\n            // 尝试移动棋子\r\n            const isOnline = !!(new URLSearchParams(window.location.search)).get('roomId');\r\n            if (isOnline && yourColor && gameState && gameState.currentPlayer && yourColor !== gameState.currentPlayer) {\r\n                // 取消弹窗提示，仅静默阻止\r\n                selectedPiece.classList.remove('selected');\r\n                selectedPiece = null;\r\n                clearValidMoves();\r\n                return;\r\n            }\r\n            makeMove(selectedX, selectedY, x, y);\r\n\r\n            // 清除选择和移动提示\r\n            selectedPiece.classList.remove('selected');\r\n            selectedPiece = null;\r\n            clearValidMoves();\r\n        }\r\n    }\r\n\r\n    // 显示合法移动位置（从后端获取）\r\n    async function showValidMoves(x, y) {\r\n        try {\r\n            const token = localStorage.getItem('authToken');\r\n            const res = await fetch(`${apiBaseUrl}/valid-moves?sessionId=${sessionId}&fromX=${x}&fromY=${y}`, {\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + token\r\n                }\r\n            });\r\n            const data = await res.json();\r\n            if (!data.success) return;\r\n            if (data.result === 'RED_WIN' || data.result === 'BLACK_WIN') {\r\n                const msg = data.result === 'RED_WIN' ? '红方取胜' : '黑方取胜';\r\n                alert(msg);\r\n                await restartGame();\r\n                return;\r\n            }\r\n            data.moves.forEach(([mx, my]) => {\r\n                const moveIndicator = document.createElement('div');\r\n                moveIndicator.className = 'valid-move';\r\n                // 合法落点绘制在交点\r\n                const gridSize = 66; // 格子大小（从65增加到65.5）\r\n                const boardPadding = 30; // 棋盘内边距\r\n                const indicatorOffset = 8; // 提示点偏移量（提示点大小的一半）\r\n\r\n                moveIndicator.style.left = `${boardPadding + mx * gridSize - indicatorOffset}px`;\r\n                moveIndicator.style.top = `${boardPadding + my * gridSize - indicatorOffset}px`;\r\n                moveIndicator.dataset.x = mx;\r\n                moveIndicator.dataset.y = my;\r\n                moveIndicator.addEventListener('click', handleValidMoveClick);\r\n                chessboard.appendChild(moveIndicator);\r\n            });\r\n        } catch (e) {\r\n            console.error('获取合法走法失败', e);\r\n        }\r\n    }\r\n\r\n    // 合法移动位置点击处理\r\n    function handleValidMoveClick(event) {\r\n        if (!selectedPiece) return;\r\n\r\n        const x = parseInt(event.currentTarget.dataset.x);\r\n        const y = parseInt(event.currentTarget.dataset.y);\r\n        const fromX = parseInt(selectedPiece.dataset.x);\r\n        const fromY = parseInt(selectedPiece.dataset.y);\r\n\r\n        makeMove(fromX, fromY, x, y);\r\n\r\n        selectedPiece.classList.remove('selected');\r\n        selectedPiece = null;\r\n        clearValidMoves();\r\n    }\r\n\r\n    // 清除移动提示\r\n    function clearValidMoves() {\r\n        document.querySelectorAll('.valid-move').forEach(v => v.remove());\r\n    }\r\n\r\n    // 更新回合指示器\r\n    function updateTurnIndicator() {\r\n        if (!gameState) return;\r\n\r\n        turnIndicator.textContent = gameState.currentPlayer === 'RED' ? '红方' : '黑方';\r\n        turnIndicator.style.color = gameState.currentPlayer === 'RED' ? '#b30000' : '#000';\r\n    }\r\n\r\n \r\n\r\n    // 获取棋子名称\r\n    // 修改后的棋子名称映射\r\n    function getPieceName(piece) {\r\n        const pieceNames = {\r\n            CHE: '车',\r\n            MA: '马',\r\n            XIANG: piece.color === 'RED' ? '相' : '象',\r\n            SHI: piece.color === 'RED' ? '仕' : '士',\r\n            BOSS: piece.color === 'RED' ? '帅' : '将',\r\n            PAO: '炮',\r\n            BING: piece.color === 'RED' ? '兵' : '卒'\r\n        };\r\n        return (piece.color === 'RED' ? '红' : '黑') + pieceNames[piece.type];\r\n    }\r\n\r\n    // 显示/隐藏加载指示器\r\n    function showLoading(show) {\r\n        loadingIndicator.style.display = show ? 'block' : 'none';\r\n    }\r\n\r\n    // 事件监听\r\n    document.getElementById('returnBtn').addEventListener('click', () => {\r\n        window.location.href = 'gamebody.html';\r\n    });\r\n\r\n    document.getElementById('undoBtn').addEventListener('click', undoMove);\r\n    document.getElementById('restartBtn').addEventListener('click', restartGame);\r\n\r\n    document.getElementById('hintBtn').addEventListener('click', () => {\r\n        statusInfo.textContent = '提示功能将在后续版本中开放';\r\n    });\r\n\r\n    document.getElementById('saveBoardBtn').addEventListener('click', () => {\r\n        statusInfo.textContent = '保存功能将在后续版本中开放';\r\n    });\r\n\r\n    document.getElementById('loadBoardBtn').addEventListener('click', () => {\r\n        statusInfo.textContent = '加载功能将在后续版本中开放';\r\n    });\r\n\r\n    // 键盘快捷键\r\n    document.addEventListener('keydown', (e) => {\r\n        if (e.ctrlKey && e.key === 'z') {\r\n            undoMove();\r\n        }\r\n    });\r\n\r\n    // 父页面可通过 postMessage 触发刷新\r\n    window.addEventListener('message', (e) => {\r\n        if (!e || !e.data) return;\r\n        if (e.data.type === 'refreshGameState') {\r\n            fetchGameState();\r\n        } else if (e.data.type === 'toast') {\r\n            // 过滤“未到你的回合”的提示，静默处理\r\n            if (e.data.message !== '未到你的回合') {\r\n                alert(e.data.message || '提示');\r\n            }\r\n        } else if (e.data.type === 'yourColor') {\r\n            yourColor = (e.data.color || '').toUpperCase();\r\n            if (yourColor) {\r\n                const sideIndicator = document.getElementById('sideIndicator');\r\n                if (sideIndicator) sideIndicator.textContent = '您当前执：' + (yourColor === 'RED' ? '红方' : '黑方');\r\n            }\r\n        }\r\n    });\r\n\r\n    // 兼容保留：仍支持父页面主动下发 yourColor（不依赖此路径）\r\n\r\n    // 调试功能：显示网格参考线（可选）\r\n    function showGridLines() {\r\n        // 清除现有的参考线\r\n        document.querySelectorAll('.grid-line').forEach(line => line.remove());\r\n\r\n        const gridSize = 66; // 格子大小（从65增加到65.5）\r\n        const boardPadding = 30;\r\n\r\n        // 绘制竖线\r\n        for (let x = 0; x <= 9; x++) {\r\n            const line = document.createElement('div');\r\n            line.className = 'grid-line';\r\n            line.style.position = 'absolute';\r\n            line.style.left = `${boardPadding + x * gridSize}px`;\r\n            line.style.top = `${boardPadding}px`;\r\n            line.style.width = '1px';\r\n            line.style.height = `${10 * gridSize}px`;\r\n            line.style.backgroundColor = 'rgba(255, 0, 0, 0.3)';\r\n            line.style.pointerEvents = 'none';\r\n            line.style.zIndex = '5';\r\n            chessboard.appendChild(line);\r\n        }\r\n\r\n        // 绘制横线\r\n        for (let y = 0; y <= 10; y++) {\r\n            const line = document.createElement('div');\r\n            line.className = 'grid-line';\r\n            line.style.position = 'absolute';\r\n            line.style.left = `${boardPadding}px`;\r\n            line.style.top = `${boardPadding + y * gridSize}px`;\r\n            line.style.width = `${9 * gridSize}px`;\r\n            line.style.height = '1px';\r\n            line.style.backgroundColor = 'rgba(0, 0, 255, 0.3)';\r\n            line.style.pointerEvents = 'none';\r\n            line.style.zIndex = '5';\r\n            chessboard.appendChild(line);\r\n        }\r\n    }\r\n\r\n    // 启动\r\n    bootGame();\r\n\r\n    // 如果需要调试，可以取消注释下面这行来显示网格线\r\n    // showGridLines();\r\n</script>\r\n</body>\r\n</html>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/classes/static/single-practice.html b/target/classes/static/single-practice.html
--- a/target/classes/static/single-practice.html	(revision 716ce82d69b4353da37fbaabd9d92bf1fd114ab2)
+++ b/target/classes/static/single-practice.html	(date 1757063082493)
@@ -534,7 +534,7 @@
         if (!token) {
             alert('请先登录');
             window.location.href = '/index.html';
-            return;
+
         }
     })();
 
@@ -587,7 +587,7 @@
     // 初始化游戏
     async function initializeGame() {
         showLoading(true);
-
+        console.log("初始化的调用");
         try {
             // 调用后端初始化接口
             const token = localStorage.getItem('authToken');
@@ -962,7 +962,7 @@
         turnIndicator.style.color = gameState.currentPlayer === 'RED' ? '#b30000' : '#000';
     }
 
- 
+
 
     // 获取棋子名称
     // 修改后的棋子名称映射
